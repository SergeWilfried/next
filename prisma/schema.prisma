// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  ACCOUNTANT
  TEACHER
  PARENT
  STUDENT
  USER
}

enum SchoolCategory {
  PRIVATE
  PUBLIC
  CHARTER
  RELIGIOUS
  NON_PROFIT
}

enum SchoolType {
  HIGH_SCHOOL
  MIDDLE_SCHOOL
  ELEMENTARY_SCHOOL
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  role          UserRole  @default(USER)
  parent        Parent?

  accounts Account[]
  sessions Session[]
 
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@map(name: "users")
}

model School {
  id          String   @id @default(cuid())
  name        String
  address     String
  phoneNumber String
  parents     Parent[]
  students    Student[]
  pickupPeople PickupPerson[]
  applications Application[]
  enrollments Enrollment[]
  donations   Donation[]
  staff       Staff[]
  category    SchoolCategory
  type        SchoolType
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([name, address])
  @@map(name: "schools")
}

model Parent {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  user                    User     @relation(fields: [userId], references: [id])
  phoneNumber             String
  communicationPreference CommunicationPreference
  emergencyContacts       Json[]   // Embedded emergency contacts
  students                Student[]
  pickupPeople            PickupPerson[]
  applications            Application[]
  enrollments             Enrollment[]
  donations               Donation[]
  school                  School   @relation(fields: [schoolId], references: [id])
  schoolId                String
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@map(name: "parents")
}


model Student {
  id             String   @id @default(cuid())
  parent         Parent   @relation(fields: [parentId], references: [id])
  parentId       String
  dateOfBirth    DateTime
  firstName      String
  lastName       String
  middleName     String?
  suffix         String?
  grade          String
  allergies      String?
  medicalNotes   String?
  school         School   @relation(fields: [schoolId], references: [id])
  schoolId       String
  pickupPeople   PickupPerson[]
  enrollments    Enrollment[]
  disciplinaryActions DisciplinaryAction[]
  achievements   Achievement[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([parentId, schoolId, dateOfBirth])
  @@map(name: "students")
}

model PickupPerson {
  id             String   @id @default(cuid())
  parent         Parent   @relation(fields: [parentId], references: [id])
  parentId       String
  name           String
  relationship   String
  school         School   @relation(fields: [schoolId], references: [id])
  schoolId       String
  students       Student[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([parentId, name, relationship])
  @@map(name: "pickup_people")
}

model Application {
  id             String   @id @default(cuid())
  parent         Parent   @relation(fields: [parentId], references: [id])
  parentId       String
  studentName    String
  desiredGrade   Int
  status         ApplicationStatus
  submittedAt    DateTime @default(now())
  school         School   @relation(fields: [schoolId], references: [id])
  schoolId       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([parentId, studentName, desiredGrade, schoolId])
  @@map(name: "applications")
}

model Enrollment {
  id             String   @id @default(cuid())
  parent         Parent   @relation(fields: [parentId], references: [id])
  parentId       String
  student        Student  @relation(fields: [studentId], references: [id])
  studentId      String
  academicYear   String
  grade          String
  status         EnrollmentStatus
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  school         School   @relation(fields: [schoolId], references: [id])
  schoolId       String
  payments       Payment[]
  totalFee       Float
  paidAmount     Float    @default(0)

  @@unique([studentId, academicYear, schoolId])
  @@map(name: "enrollments")
}

model Payment {
  id             String   @id @default(cuid())
  enrollment     Enrollment @relation(fields: [enrollmentId], references: [id])
  enrollmentId   String
  amount         Float
  status         PaymentStatus
  paymentDate    DateTime
  paymentMethod  PaymentMethod
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@map(name: "payments")
}

model DisciplinaryAction {
  id             String   @id @default(cuid())
  student        Student  @relation(fields: [studentId], references: [id])
  studentId      String
  description    String
  date           DateTime
  actionTaken    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map(name: "disciplinary_actions")
}

model Achievement {
  id             String   @id @default(cuid())
  student        Student  @relation(fields: [studentId], references: [id])
  studentId      String
  description    String
  date           DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map(name: "achievements")
}

model Donation {
  id             String   @id @default(cuid())
  parent         Parent   @relation(fields: [parentId], references: [id])
  parentId       String
  amount         Float
  date           DateTime
  purpose        String?
  school         School   @relation(fields: [schoolId], references: [id])
  schoolId       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([parentId])
  @@index([schoolId])
  @@map(name: "donations")
}

model Staff {
  id             String   @id @default(cuid())
  position       String
  department     String?
  name           String
  email          String   @unique
  school         School   @relation(fields: [schoolId], references: [id])
  schoolId       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([name, position, schoolId])
  @@map(name: "staff")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

enum CommunicationPreference {
  SMS
  WHATSAPP
  PHONE
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum EnrollmentStatus {
  ACTIVE
  INACTIVE
  GRADUATED
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
}

enum PaymentMethod {
  CASH,
  MOBILE_MONEY
  WAVE
  CREDIT_CARD
  BANK_TRANSFER
  CHECK
}
