// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  ACCOUNTANT
  TEACHER
  PARENT
  STUDENT
  USER
}

enum SchoolCategory {
  PRIVATE
  PUBLIC
  CHARTER
  RELIGIOUS
  NON_PROFIT
}

enum SchoolType {
  HIGH_SCHOOL
  MIDDLE_SCHOOL
  ELEMENTARY_SCHOOL
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  role          UserRole  @default(USER)

  accounts Account[]
  sessions Session[]
  schools  School[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  staff  Staff?
  parent Parent?

  @@map(name: "users")
}

model School {
  id            String         @id @default(cuid())
  name          String
  address       Address        @relation(fields: [addressId], references: [id])
  addressId     String         @unique
  phoneNumber   String
  parents       Parent[]
  students      Student[]
  pickupPeople  PickupPerson[]
  applications  Application[]
  enrollments   Enrollment[]
  donations     Donation[]
  reports       Report[]
  staff         Staff[]
  category      SchoolCategory
  type          SchoolType
  latitude      Float?
  longitude     Float?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  User          User?          @relation(fields: [userId], references: [id])
  userId        String?
  classes       Class[]
  courses       Course[]
  academicYears AcademicYear[]

  @@unique([name, addressId])
  @@map(name: "schools")
}

model Report {
  id          String   @id @default(cuid())
  name        String
  description String?
  fileUrl     String?
  school      School   @relation(fields: [schoolId], references: [id])
  schoolId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([schoolId])
  @@map(name: "reports")
}

model Parent {
  id                      String                  @id @default(cuid())
  firstName               String
  lastName                String
  middleName              String?
  gender                  GenderEnum              @default(OTHER)
  dateOfBirth             DateTime
  maritalStatus           MaritalStatus
  phoneNumber             String
  communicationPreference CommunicationPreference
  emergencyContacts       Json[] // Embedded emergency contacts
  students                Student[]
  pickupPeople            PickupPerson[]
  applications            Application[]
  enrollments             Enrollment[]
  school                  School                  @relation(fields: [schoolId], references: [id])
  schoolId                String
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  user                    User                    @relation(fields: [userId], references: [id])
  userId                  String                  @unique
  address                 Address                 @relation(fields: [addressId], references: [id])
  addressId               String                  @unique

  @@map(name: "parents")
}

enum GenderEnum {
  MALE
  FEMALE
  OTHER
}

enum EnrollmentStatus {
  ACTIVE
  INACTIVE
  GRADUATED
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
  OTHER
}

enum DonationType {
  DONATION
  MONTHLY_FEE
}

model Student {
  id                  String               @id @default(cuid())
  parent              Parent               @relation(fields: [parentId], references: [id])
  parentId            String
  dateOfBirth         DateTime
  gender              GenderEnum           @default(OTHER)
  firstName           String
  lastName            String
  middleName          String?
  suffix              String?
  allergies           String?
  medicalNotes        String?
  school              School               @relation(fields: [schoolId], references: [id])
  schoolId            String
  pickupPeople        PickupPerson[]
  enrollments         Enrollment[]
  disciplinaryActions DisciplinaryAction[]
  achievements        Achievement[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  status              EnrollmentStatus     @default(INACTIVE)
  Class               Class?               @relation(fields: [classId], references: [id])
  classId             String?
  donations            Donation[]
  attendance          Attendance[]
  grades              Grade[]

  @@unique([parentId, schoolId, dateOfBirth])
  @@map(name: "students")
}

model PickupPerson {
  id           String    @id @default(cuid())
  parent       Parent    @relation(fields: [parentId], references: [id])
  parentId     String
  name         String
  relationship String
  school       School    @relation(fields: [schoolId], references: [id])
  schoolId     String
  students     Student[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([parentId, name, relationship])
  @@map(name: "pickup_people")
}

model Application {
  id          String            @id @default(cuid())
  parent      Parent            @relation(fields: [parentId], references: [id])
  parentId    String
  studentName String
  status      ApplicationStatus
  submittedAt DateTime          @default(now())
  school      School            @relation(fields: [schoolId], references: [id])
  schoolId    String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  class       Class?            @relation(fields: [classId], references: [id])
  classId     String?

  @@unique([parentId, studentName, schoolId])
  @@map(name: "applications")
}

model Course {
  id          String   @id @default(cuid())
  name        String
  description String?
  school      School   @relation(fields: [schoolId], references: [id])
  schoolId    String
  classId     String
  class       Class    @relation(fields: [classId], references: [id])
  teacher     Staff    @relation(fields: [teacherId], references: [id])
  teacherId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  grades      Grade[]

  @@unique([name, schoolId])
  @@map(name: "courses")
}

model Class {
  id           String        @id @default(cuid())
  name         String
  description  String?
  school       School        @relation(fields: [schoolId], references: [id])
  schoolId     String
  students     Student[]
  enrollments  Enrollment[]
  applications Application[]
  teachers     Staff[]
  courses       Course[]
  grades       Grade[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Attendance   Attendance[]

  @@unique([name, schoolId])
  @@map(name: "classes")
}

model Grade {
  id          String   @id @default(cuid())
  name        String
  description String?
  score       Float?
  student     Student  @relation(fields: [studentId], references: [id])
  studentId   String
  class       Class?   @relation(fields: [classId], references: [id])
  classId     String?
  course      Course?  @relation(fields: [courseId], references: [id])
  courseId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([name, studentId, classId, courseId])
  @@index([classId])
  @@index([courseId])
  @@map(name: "grades")
}

model Enrollment {
  id             String           @id @default(cuid())
  parent         Parent           @relation(fields: [parentId], references: [id])
  parentId       String
  student        Student          @relation(fields: [studentId], references: [id])
  studentId      String
  class          Class            @relation(fields: [classId], references: [id])
  classId        String
  status         EnrollmentStatus
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  school         School           @relation(fields: [schoolId], references: [id])
  schoolId       String
  payments       Payment[]
  balance        Float            @default(0)
  academicYear   AcademicYear     @relation(fields: [academicYearId], references: [id])
  academicYearId String

  @@unique([studentId, academicYearId, schoolId])
  @@index([studentId])
  @@index([schoolId])
  @@map(name: "enrollments")
}

model Payment {
  id            String        @id @default(cuid())
  enrollment    Enrollment    @relation(fields: [enrollmentId], references: [id])
  enrollmentId  String
  amount        Float
  status        PaymentStatus
  paymentDate   DateTime
  paymentMethod PaymentMethod
  reference     String?       @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([enrollmentId])
  @@map(name: "payments")
}

model DisciplinaryAction {
  id          String   @id @default(cuid())
  student     Student  @relation(fields: [studentId], references: [id])
  studentId   String
  description String
  date        DateTime
  actionTaken String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map(name: "disciplinary_actions")
}

model Achievement {
  id          String   @id @default(cuid())
  student     Student  @relation(fields: [studentId], references: [id])
  studentId   String
  description String
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map(name: "achievements")
}

model Donation {
  id        String   @id @default(cuid())
  amount    Float
  date      DateTime
  purpose   String?
  school    School   @relation(fields: [schoolId], references: [id])
  schoolId  String
  reference String?
  student   Student  @relation(fields: [studentId], references: [id])
  studentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolId])
  @@map(name: "donations")
}

model Staff {
  id          String   @id @default(cuid())
  position    String
  department  String?
  name        String
  email       String   @unique
  school      School   @relation(fields: [schoolId], references: [id])
  schoolId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Course      Course[]
  Class       Class?   @relation(fields: [classId], references: [id])
  classId     String?
  phoneNumber String
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique

  @@unique([name, position, schoolId])
  @@map(name: "staff")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Attendance {
  id        String           @id @default(cuid())
  student   Student          @relation(fields: [studentId], references: [id])
  studentId String
  date      DateTime
  status    AttendanceStatus
  class     Class            @relation(fields: [classId], references: [id])
  classId   String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@unique([studentId, date, classId])
  @@map(name: "attendances")
}

enum CommunicationPreference {
  SMS
  WHATSAPP
  PHONE
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum PaymentMethod {
  CASH
  MOBILE_MONEY
  WAVE
  CREDIT_CARD
  BANK_TRANSFER
  CHECK
}

model AcademicYear {
  id          String       @id @default(cuid())
  name        String
  startDate   DateTime
  endDate     DateTime
  school      School       @relation(fields: [schoolId], references: [id])
  schoolId    String
  enrollments Enrollment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([name, schoolId])
  @@map(name: "academic_years")
}

model Address {
  id        String   @id @default(cuid())
  street    String
  city      String
  state     String?
  zipCode   String?
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  school    School?
  parent    Parent?

  @@map(name: "addresses")
}